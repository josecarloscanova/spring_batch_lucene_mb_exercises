<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:b="http://www.springframework.org/schema/batch"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       	http://www.springframework.org/schema/beans/spring-beans.xsd
      	http://www.springframework.org/schema/batch
      	http://www.springframework.org/schema/batch/spring-batch.xsd
       	http://www.springframework.org/schema/aop
 		http://www.springframework.org/schema/aop/spring-aop.xsd">
 		
	<!-- <import resource="classpath:spring-dao-context.xml" /> -->

    <bean lazy-init="true" id="batchDataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.batch.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    
    <bean lazy-init="true" id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="batchDataSource" />
	</bean>
	
	<bean lazy-init="true" id="propertyPlaceholderConfigurer"  
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
		  <property name="locations">  
		    <list>  
		      <value>classpath:configuration.properties</value>  
		    </list>  
		  </property>  
	</bean> 
	
	<bean lazy-init="true" id="defaultVersion" class="org.apache.lucene.util.Version" factory-method="valueOf">
		<constructor-arg value="LUCENE_31"/>
	</bean>
	
	<bean lazy-init="true" id="defaultOpenMode" class="org.apache.lucene.index.IndexWriterConfig.OpenMode" factory-method="valueOf">
		<constructor-arg value="CREATE_OR_APPEND"/>
	</bean>
	
	<bean lazy-init="true" id="standardAnalyser" class="org.apache.lucene.analysis.standard.StandardAnalyzer">
		<constructor-arg type="org.apache.lucene.util.Version" ref="defaultVersion"/>
	</bean>
	
	<bean lazy-init="true" id="indexFilePath" class="java.io.File">
		<constructor-arg value="F:/IndexPath/ArtistName_Index"></constructor-arg>
	</bean>
	
	<bean lazy-init="true" id="indexFsDirectory" class="org.apache.lucene.store.SimpleFSDirectory">
		<constructor-arg ref="indexFilePath"></constructor-arg>
	</bean>
	
	<bean lazy-init="true" id="indexWriterConfig" class="org.apache.lucene.index.IndexWriterConfig">
		<constructor-arg ref="defaultVersion"></constructor-arg>
		<constructor-arg ref="standardAnalyser"></constructor-arg>
	</bean>
	
	<bean lazy-init="true" id="indexWriter" class="org.apache.lucene.index.IndexWriter"> 
		<constructor-arg ref="indexFsDirectory"></constructor-arg>
		<constructor-arg ref="indexWriterConfig"></constructor-arg>
	</bean>	
	
	<bean lazy-init="true" id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
    	<property name="transactionManager" ref="transactionManager"/>
	</bean>
	
	<!-- FLAT FILE SECTION_BEGIN -->
	<bean lazy-init="true" id="artistNameMapping" class="org.nanotek.beans.mapping.ArtistNameMapping">
		<property name="type" value="org.nanotek.beans.ArtistName"></property>
	</bean>
	
	<bean lazy-init="true" id="artistNameToBean" class="org.nanotek.beans.mapping.ArtistNameCsvToBean"></bean>
	
	<bean lazy-init="true" id="artistNameFileReader" class="java.io.FileReader"> 
		<constructor-arg  type="java.lang.String" value="${music.brainz.artist.name.file}"></constructor-arg>
	</bean>
	
	<bean lazy-init="true" id="artistNameCsvReader" class="org.nanotek.util.CsvTabReader">
		 <constructor-arg ref="artistNameFileReader"></constructor-arg>
	</bean>
	
	<bean lazy-init="true" id="uidService" class="org.nanotek.indexer.util.key.UIDService"></bean>
	<bean lazy-init="true" id="uuidService" class="org.nanotek.indexer.util.key.GenericUUIDService"></bean>
	<bean lazy-init="true" id="objIDService" class="org.nanotek.indexer.util.key.ObjIDService"></bean>
	
	<bean lazy-init="true" id="keyServiceFactory" class="org.nanotek.indexer.util.key.KeyServiceFactory">
		<property name="uidService" ref="uidService"></property>
		<property name="uuidService" ref="uuidService"></property>
		<property name="objIDService" ref="objIDService"></property>
	</bean> 	
	
	<bean lazy-init="true" id="artistNameReader" class="org.nanotek.musicbrainz.job.readers.ArtistNameReader">
		<property name="itemMapping" ref="artistNameMapping"></property>
		<property name="fileStr" value="${music.brainz.artist.name.file}"></property>
		<property name="csvMap" ref="artistNameToBean"></property>
		<property name="reader" ref="artistNameCsvReader"></property>
		<property name="keyServiceFactory" ref="keyServiceFactory"></property>
	</bean>
	
	<bean lazy-init="true" id="artistNameWriter" class="org.nanotek.lucene.job.writers.ArtistNameIndexWriter">
		<property name="indexWriter" ref="indexWriter"></property>
	</bean>
	
	<bean lazy-init="true" id="stepListener" class="org.nanotek.lucene.job.listeners.ArtistNameStepListener"> 
		<property name="indexWriter" ref="indexWriter"></property>
	</bean>
	
	<bean lazy-init="true" id="artistNameChunkLister" class="org.nanotek.lucene.job.listeners.ArtistNameChunkListener">
		<property name="indexWriter" ref="indexWriter"></property>
	</bean>
	
	<b:job id="artistNameIndexJob" job-repository="jobRepository" restartable="false">
	    <b:step id="artistNameIndexLoad">
	    	<b:tasklet>
	    		<b:chunk reader="artistNameReader" commit-interval="10000" writer="artistNameWriter"></b:chunk>
	    		<b:listeners>
	    			<b:listener ref="artistNameChunkLister"/>
	    		</b:listeners>
	    	</b:tasklet>
	    	<b:listeners>
            		<b:listener ref="stepListener"/>
       		</b:listeners>
	    </b:step>
	</b:job>
	
	<b:job-repository id="jobRepository"
	    data-source="batchDataSource"
	    transaction-manager="transactionManager"
	    isolation-level-for-create="SERIALIZABLE"
	    table-prefix="BATCH_"
		max-varchar-length="3000"
	></b:job-repository>
	
	<bean lazy-init="true" id="jobRegistry" class="org.springframework.batch.core.configuration.support.MapJobRegistry" />
	
	<bean lazy-init="true" class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor">
		<property name="jobRegistry" ref="jobRegistry"/>
	</bean>
	
	<bean lazy-init="true" id="jobExplorer"
		class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean"
		p:dataSource-ref="batchDataSource" />
	
	<bean lazy-init="true" id="jobOperator" class="org.springframework.batch.core.launch.support.SimpleJobOperator">
	    <property name="jobExplorer">
	        <bean lazy-init="true" class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean">
	            <property name="dataSource" ref="batchDataSource" />
	        </bean>
	    </property>
	    <property name="jobRepository" ref="jobRepository" />
	    <property name="jobRegistry" ref="jobRegistry" />
	    <property name="jobLauncher" ref="jobLauncher" />
	</bean>
	
	<bean lazy-init="true" id="jobLauncher"
	      class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
	    <property name="jobRepository" ref="jobRepository" />
	    <property name="taskExecutor">
	        <bean lazy-init="true" class="org.springframework.core.task.SimpleAsyncTaskExecutor" />
	    </property>
	</bean>

</beans>